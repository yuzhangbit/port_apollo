syntax = "proto2";

package apollo.common.adapter;

// Property of a certain Input/Output that will be used by a module.
message AdapterConfig {
  enum MessageType {
    POINT_CLOUD = 1;
    VLP16_POINT_CLOUD = 58;
    GPS = 2;
    IMU = 3;
    CHASSIS = 4;
    LOCALIZATION = 5;
    PLANNING_TRAJECTORY = 6;
    MONITOR = 7;
    PAD = 8;
    CONTROL_COMMAND = 9;
    PREDICTION = 10;
    PERCEPTION_OBSTACLES = 11;
    TRAFFIC_LIGHT_DETECTION = 12;
    CHASSIS_DETAIL = 13;
    DECISION = 14 [deprecated = true];
    CANBUS = 15;
    ROUTING_REQUEST = 16;
    ROUTING_RESPONSE = 17;
    RELATIVE_ODOMETRY = 18;
    INS_STAT = 19;
    HMI_COMMAND = 20 [deprecated = true];
    MOBILEYE = 21;
    DELPHIESR = 22;
    COMPRESSED_IMAGE = 23;
    SYSTEM_STATUS = 24;
    INS_STATUS = 25;
    GNSS_STATUS = 26;
    CONTI_RADAR = 27;
    IMAGE_SHORT = 28;
    IMAGE_LONG = 29;
    DRIVE_EVENT = 30;
    GNSS_RTK_OBS = 31;
    GNSS_RTK_EPH = 32;
    GNSS_BEST_POSE = 33;
    LOCALIZATION_MSF_GNSS = 34;
    LOCALIZATION_MSF_LIDAR = 35;
    LOCALIZATION_MSF_SINS_PVA = 36;
    RAW_IMU = 37;
    LOCALIZATION_MSF_STATUS = 38;
    STATIC_INFO = 39;
    RELATIVE_MAP = 40;
    NAVIGATION = 41;
    ULTRASONIC_RADAR = 42;
    VOICE_DETECTION_REQUEST = 43;
    VOICE_DETECTION_RESPONSE = 44;
    IMAGE_FRONT = 45;
    PANDORA_POINT_CLOUD = 46;
    PANDORA_CAMERA_FRONT_COLOR = 47;
    PANDORA_CAMERA_RIGHT_GRAY = 48;
    PANDORA_CAMERA_LEFT_GRAY = 49;
    PANDORA_CAMERA_FRONT_GRAY = 50;
    PANDORA_CAMERA_BACK_GRAY = 51;
    PERCEPTION_LANE_MASK = 52;
    GUARDIAN = 53;
    GNSS_RAW_DATA = 54;
    STREAM_STATUS = 55;
    GNSS_HEADING = 56;
    RTCM_DATA = 57;
    RACOBIT_RADAR = 59;  
  }
  enum Mode {
    RECEIVE_ONLY = 0;
    PUBLISH_ONLY = 1;
    DUPLEX = 2;
  }
  required MessageType type = 1;
  required Mode mode = 2;
  // The max number of received messages to keep in the adapter, this field
  // is not useful for PUBLISH_ONLY mode messages.
  optional int32 message_history_limit = 3 [default = 10];
  optional bool latch = 4 [default=false];
}

// A config to specify which messages a certain module would consume and
// produce.
message AdapterManagerConfig {
  repeated AdapterConfig config = 1;
  required bool is_ros = 2;  // Whether the message comes from ROS
}
